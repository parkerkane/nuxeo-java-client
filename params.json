{
  "name": "Nuxeo Java Client",
  "tagline": "Java Client Library for the Nuxeo Platform REST APIs",
  "body": "# Java Client Library 1.0 for the Nuxeo Platform REST APIs\r\n\r\nThe Nuxeo Java Client is a Java client library (can be used for Android) for the Nuxeo Automation and REST API.\r\n\r\nThis is supported by Nuxeo and compatible with Nuxeo LTS 2015 and latest FastTracks. \r\n\r\nHere is the [Documentation Website](http://nuxeo.github.io/nuxeo-java-client).\r\n\r\n![Build Status](https://qa.nuxeo.org/jenkins/buildStatus/icon?job=nuxeo-java-client-master)\r\n\r\n\r\n## Building\r\n\r\n`mvn clean install`\r\n\r\n## Getting Started\r\n\r\n###Server\r\n\r\n- [Download a Nuxeo server](http://www.nuxeo.com/en/downloads) (the zip version)\r\n\r\n- Unzip it\r\n\r\n- Linux/Mac:\r\n    - `NUXEO_HOME/bin/nuxeoctl start`\r\n- Windows:\r\n    - `NUXEO_HOME\\bin\\nuxeoctl.bat start`\r\n\r\n- From your browser, go to `http://localhost:8080/nuxeo`\r\n\r\n- Follow Nuxeo Wizard by clicking 'Next' buttons, re-start once completed\r\n\r\n- Check Nuxeo correctly re-started `http://localhost:8080/nuxeo`\r\n  - username: Administrator\r\n  - password: Administrator\r\n\r\n### Client - Library Import\r\n\r\nHere is the [Nuxeo Client Library 1.0](https://mavenin.nuxeo.com/nexus/service/local/repositories/public-releases/content/org/nuxeo/client/nuxeo-java-client/1.0/nuxeo-java-client-1.0.jar).\r\n\r\nHere is the [1.0 changeset]().\r\n\r\n**Import Nuxeo Java Client with:**\r\n\r\nMaven:\r\n\r\n```\r\n<dependency>\r\n  <groupId>org.nuxeo.client</groupId>\r\n  <artifactId>nuxeo-java-client</artifactId>\r\n  <version>1.0</version>\r\n</dependency>\r\n```\r\n\r\nwith repository:\r\n\r\n```\r\n<repository>\r\n  <id>public-releases</id>\r\n  <url>\r\n    http://mavenin.nuxeo.com/nexus/content/repositories/public-releases\r\n  </url>\r\n</repository>\r\n```\r\n\r\nGradle:\r\n\r\n```\r\ncompile 'org.nuxeo.client:nuxeo-java-client:1.0'\r\n```\r\n\r\nIvy:\r\n\r\n```\r\n<dependency org=\"org.nuxeo.client\" name=\"nuxeo-java-client\" rev=\"1.0\" />\r\n\r\n```\r\n\r\nSBT:\r\n\r\n```\r\nlibraryDependencies += \"org.nuxeo.client\" % \"nuxeo-java-client\" % \"1.0\"\r\n```\r\n\r\n### Sub-Modules Organization\r\n\r\n- `nuxeo-java-client`: Nuxeo Java Client Library.\r\n- `nuxeo-java-client-test`: Nuxeo Java Client Suite Test.\r\n- `NuxeoJavaClientSample`: Nuxeo Java Client Android Application Sample And Suite Test.\r\n\r\n###Usage\r\n\r\n####Creating a Client\r\n\r\nFor a given `url`:\r\n\r\n```java\r\nString url = \"http://localhost:8080/nuxeo\";\r\n```\r\n\r\nAnd given credentials:\r\n\r\n```java\r\nimport org.nuxeo.client.api.NuxeoClient;\r\n\r\nNuxeoClient nuxeoClient = new NuxeoClient(url, \"Administrator\", \"Administrator\");\r\n```\r\n\r\nOptions:\r\n\r\n```java\r\n// For defining session and transaction timeout\r\nnuxeoClient = nuxeoClient.timeout(60).transactionTimeout(60);\r\n```\r\n\r\n```java\r\n// For defining global schemas, global enrichers and global headers in general\r\nnuxeoClient = nuxeoClient.schemas(\"dublincore\", \"common\").enrichers(\"acls\",\"preview\").header(key1,value1).header(key2, value2);\r\n```\r\n\r\n```java\r\n// For defining all schemas\r\nnuxeoClient = nuxeoClient.schemas(\"*\");\r\n```\r\n\r\n```java\r\n// To enable cache\r\nnuxeoClient = nuxeoClient.enableDefaultCache();\r\n```\r\n\r\n```java\r\n// To logout (shutdown the client, headers etc...)\r\nnuxeoClient = nuxeoClient.logout();\r\n```\r\n\r\n####APIs\r\n\r\nGeneral rule: \r\n\r\n- when using `fetch` methods, `NuxeoClient` is making remote calls. \r\n- when using `get` methods, objects are retrieved from memory.\r\n\r\n####Automation API\r\n\r\nTo use the Automation API, `org.nuxeo.client.api.NuxeoClient#automation()` is the entry point for all calls:\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.Document;\r\n\r\n// Fetch the root document\r\nDocument result = nuxeoClient.automation().param(\"value\", \"/\").execute(\"Repository.GetDocument\");\r\n```\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.Operation;\r\nimport org.nuxeo.client.api.objects.Documents;\r\n\r\n// Execute query\r\nOperation operation = nuxeoClient.automation(\"Repository.Query\").param(\"query\", \"SELECT * \" + \"FROM Document\");\r\nDocuments result = operation.execute();\r\n```\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.blob.Blob;\r\n\r\n// To upload|download blob(s)\r\n\r\nBlob fileBlob = new Blob(io.File file);\r\nblob = nuxeoClient.automation().newRequest(\"Blob.AttachOnDocument\").param(\"document\", \"/folder/file\").input(fileBlob).execute();\r\n\r\nBlobs inputBlobs = new Blobs();\r\ninputBlobs.add(io.File file1);\r\ninputBlobs.add(io.File file2);\r\nBlobs blobs = nuxeoClient.automation().newRequest(\"Blob.AttachOnDocument\").param(\"xpath\", \"files:files\").param(\"document\", \"/folder/file\").input(inputBlobs).execute();\r\n        \r\nBlob resultBlob = nuxeoClient.automation().input(\"folder/file\").execute(\"Document.GetBlob\");\r\n```\r\n\r\n####Repository API\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.Document;\r\n\r\n// Fetch the root document\r\nDocument root = nuxeoClient.repository().fetchDocumentRoot();\r\n```\r\n\r\n```java\r\n// Fetch document in a specific repository\r\nroot = nuxeoClient.repository().repositoryName(\"other_repo\").fetchDocumentRoot();\r\n```\r\n\r\n```java\r\n// Fetch document by path\r\nDocument folder = nuxeoClient.repository().fetchDocumentByPath(\"folder_2\");\r\n```\r\n\r\n```java\r\n// Create a document\r\nDocument folder = nuxeoClient.repository().fetchDocumentByPath(\"folder_1\");\r\nDocument document = new Document(\"file\", \"File\");\r\ndocument.set(\"dc:title\", \"new title\");\r\ndocument = nuxeoClient.repository().createDocumentByPath(\"folder_1\", document);\r\n```\r\n\r\n```java\r\n// Update a document\r\nDocument document = nuxeoClient.repository().fetchDocumentByPath(\"folder_1/note_0\");\r\nDocument documentUpdated = new Document(\"test update\", \"Note\");\r\ndocumentUpdated.setId(document.getId());\r\ndocumentUpdated.set(\"dc:title\", \"note updated\");\r\ndocumentUpdated.setTitle(\"note updated\");\r\ndocumentUpdated.set(\"dc:nature\", \"test\");\r\ndocumentUpdated = nuxeoClient.repository().updateDocument(documentUpdated);\r\n```\r\n\r\n```java\r\n// Delete a document\r\nDocument documentToDelete = nuxeoClient.repository().fetchDocumentByPath(\"folder_1/note_1\");\r\nnuxeoClient.repository().deleteDocument(documentToDelete);\r\n```\r\n\r\n```java\r\n// Fetch children\r\nDocument folder = nuxeoClient.repository().fetchDocumentByPath(\"folder_2\");\r\nDocuments children = folder.fetchChildren();\r\n```\r\n\r\n```java\r\n// Fetch blob\r\nDocument file = nuxeoClient.repository().fetchDocumentByPath(\"folder_2/file\");\r\nBlob blob = file.fetchBlob();\r\n```\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.audit.Audit;\r\n// Fetch the document Audit\r\nDocument root = nuxeoClient.repository().fetchDocumentRoot();\r\nAudit audit = root.fetchAudit();\r\n```\r\n\r\n```java\r\n// Execute query\r\nDocuments documents = nuxeoClient.repository().query(\"SELECT * \" + \"From Note\");\r\n\r\nimport org.nuxeo.client.api.objects.RecordSet;\r\n// With RecordSets\r\nRecordSet documents = nuxeoClient.automation().param(\"query\", \"SELECT * FROM Document\").execute(\"Repository.ResultSetQuery\");\r\n```\r\n\r\n```java\r\nimport retrofit2.Callback;\r\n// Fetch document asynchronously with callback\r\nnuxeoClient.repository().fetchDocumentRoot(new Callback<Document>() {\r\n            @Override\r\n            public void onResponse(Response<Document> response) {\r\n                if (!response.isSuccess()) {\r\n                    ObjectMapper objectMapper = new ObjectMapper();\r\n                    NuxeoClientException nuxeoClientException;\r\n                    try {\r\n                        nuxeoClientException = objectMapper.readValue(response.errorBody().string(),\r\n                                NuxeoClientException.class);\r\n                    } catch (IOException reason) {\r\n                        throw new NuxeoClientException(reason);\r\n                    }\r\n                    fail(nuxeoClientException.getRemoteStackTrace());\r\n                }\r\n                Document folder = response.body();\r\n                assertNotNull(folder);\r\n                assertEquals(\"Folder\", folder.getType());\r\n                assertEquals(\"document\", folder.getEntityType());\r\n                assertEquals(\"/folder_2\", folder.getPath());\r\n                assertEquals(\"Folder 2\", folder.getTitle());\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Throwable reason) {\r\n                fail(reason.getMessage());\r\n            }\r\n        });\r\n```\r\n\r\n####Permissions\r\n\r\nTo manage permission, please look inside package  `org.nuxeo.client.api.objects.acl` to handle ACP, ACL and ACE:\r\n\r\n```java\r\n// Fetch Permissions of the current document\r\nDocument folder = nuxeoClient.repository().fetchDocumentByPath(\"folder_2\");\r\nACP acp = folder.fetchPermissions();\r\nassertTrue(acp.getAcls().size() != 0);\r\nassertEquals(\"inherited\", acp.getAcls().get(0).getName());\r\nassertEquals(\"Administrator\", acp.getAcls().get(0).getAces().get(0).getUsername());\r\n```\r\n\r\n```java\r\n// Create permission on the current document\r\nGregorianCalendar begin = new GregorianCalendar(2015, Calendar.JUNE, 20, 12, 34, 56);\r\nGregorianCalendar end = new GregorianCalendar(2015, Calendar.JULY, 14, 12, 34, 56);\r\nACE ace = new ACE();\r\nace.setUsername(\"user0\");\r\nace.setPermission(\"Write\");\r\nace.setCreator(\"Administrator\");\r\nace.setBegin(begin);\r\nace.setEnd(end);\r\nace.setBlockInheritance(true);\r\nfolder.addPermission(ace);\r\n```\r\n\r\n```java\r\n// Remove permissions in 'local' on the current document for a given name\r\nfolder.removePermission(\"user0\");\r\n// Remove permissions on the current document for those given parameters\r\nfolder.removePermission(idACE, \"user0\", \"local\");\r\n```\r\n\r\n####Batch Upload\r\n\r\nBatch uploads are executed through the `org.nuxeo.client.api.objects.upload.BatchUpload`.\r\n\r\n```java\r\n// Batch Upload Initialization\r\nBatchUpload batchUpload = nuxeoClient.fetchUploadManager();\r\nassertNotNull(batchUpload.getBatchId());\r\n```\r\n\r\n```java\r\n// Upload File\r\nFile file = FileUtils.getResourceFileFromContext(\"sample.jpg\");\r\nbatchUpload = batchUpload.upload(file.getName(), file.length(), \"jpg\", batchUpload.getBatchId(), \"1\", file);\r\n\r\n// Fetch this file\r\nBatchFile batchFile = batchUpload.fetchBatchFile(\"1\");\r\n\r\nimport org.nuxeo.client.api.objects.upload.BatchFile;\r\n// Upload another file and check files\r\nfile = FileUtils.getResourceFileFromContext(\"blob.json\");\r\nbatchUpload.upload(file.getName(), file.length(), \"json\", batchUpload.getBatchId(), \"2\", file);\r\nList<BatchFile> batchFiles = batchUpload.fetchBatchFiles();\r\n```\r\nBatch upload can be executed in a [chunk mode](https://doc.nuxeo.com/display/NXDOC/Blob+Upload+for+Batch+Processing?src=search#BlobUploadforBatchProcessing-UploadingaFilebyChunksUploadingaFilebyChunks).\r\n\r\n```java\r\n// Upload file chunks\r\nBatchUpload batchUpload = nuxeoClient.fetchUploadManager().enableChunk();\r\nFile file = FileUtils.getResourceFileFromContext(\"sample.jpg\");\r\nbatchUpload = batchUpload.upload(file.getName(), file.length(), \"jpg\", batchUpload.getBatchId(), \"1\", file);\r\n```\r\n\r\nChunk size is by default 1MB (int 1024*1024). You can update this value with:\r\n\r\n```java\r\nnuxeoClient.fetchUploadManager().enableChunk().chunkSize(1024);\r\n```\r\n\r\nAttach batch to a document:\r\n\r\n```java\r\nDocument doc = new Document(\"file\", \"File\");\r\ndoc.set(\"dc:title\", \"new title\");\r\ndoc = nuxeoClient.repository().createDocumentByPath(\"folder_1\", doc);\r\ndoc.set(\"file:content\", batchUpload.getBatchBlob());\r\ndoc = doc.updateDocument();\r\n```\r\n\r\nor via Automation:\r\n\r\n```java\r\nDocument doc = new Document(\"file\", \"File\");\r\ndoc.set(\"dc:title\", \"new title\");\r\ndoc = nuxeoClient.repository().createDocumentByPath(\"folder_1\", doc);\r\nOperation operation = nuxeoClient.automation(\"Blob.AttachOnDocument\").param(\"document\", doc);\r\nBlob blob = batchUpload.execute(operation);\r\n```\r\n\r\n####Directories\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.directory.Directory;\r\n// Fetch a directory\r\nDirectory directory = nuxeoClient.getDirectoryManager().fetchDirectory(\"continent\");\r\n```\r\n\r\n####Users/Groups\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.user.CurrentUser;\r\n// Fetch current user\r\nCurrentUser currentUser = nuxeoClient.fetchCurrentUser();\r\n```\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.user.User;\r\n// Fetch user\r\nUser user = nuxeoClient.getUserManager().fetchUser(\"Administrator\");\r\n```\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.user.Group;\r\n// Fetch group\r\nGroup group = nuxeoClient.getUserManager().fetchGroup(\"administrators\");\r\n```\r\n\r\n```java\r\n// Create User/Group\r\n\r\nUserManager userManager = nuxeoClient.getUserManager();\r\nUser newUser = new User();\r\nnewUser.setUserName(\"toto\");\r\nnewUser.setCompany(\"Nuxeo\");\r\nnewUser.setEmail(\"toto@nuxeo.com\");\r\nnewUser.setFirstName(\"to\");\r\nnewUser.setLastName(\"to\");\r\nnewUser.setPassword(\"totopwd\");\r\nList<String> groups = new ArrayList<>();\r\ngroups.add(\"members\");\r\nnewUser.setGroups(groups);\r\nUser user = userManager.createUser(newUser);\r\n\r\nUserManager userManager = nuxeoClient.getUserManager();\r\nGroup group = new Group();\r\ngroup.setGroupName(\"totogroup\");\r\ngroup.setGroupLabel(\"Toto Group\");\r\nList<String> users = new ArrayList<>();\r\nusers.add(\"Administrator\");\r\ngroup.setMemberUsers(users);\r\ngroup = userManager.createGroup(group);\r\n```\r\n\r\n```java\r\n// Update User/Group\r\nUser updatedUser = userManager.updateUser(user);\r\nGroup updatedGroup = userManager.updateGroup(group);\r\n```\r\n\r\n```java\r\n// Remove User/Group\r\nuserManager.deleteUser(\"toto\");\r\nuserManager.deleteGroup(\"totogroup\");\r\n```\r\n\r\n```java\r\n// Add User to Group\r\nuserManager.addUserToGroup(\"Administrator\", \"totogroup\");\r\nuserManager.attachGroupToUser(\"members\", \"Administrator\");\r\n```\r\n\r\n####Workflow\r\n\r\n```java\r\nimport org.nuxeo.client.api.objects.workflow.Workflows;\r\n// Fetch current user workflow instances\r\nWorkflows workflows = nuxeoClient.fetchCurrentUser().fetchWorkflowInstances();\r\n```\r\n\r\n```java\r\n// Fetch document workflow instances\r\nWorkflows workflows = nuxeoClient.repository().fetchDocumentRoot().fetchWorkflowInstances();\r\n```\r\n\r\n####Manual REST Calls\r\n\r\n`NuxeoClient` allows manual rest calls with the 4 main methods GET,POST,PUT,DELETE and provides json (de)serializer helpers:\r\n\r\n```java\r\nimport okhttp3.Response;\r\n\r\n// GET Method and Deserialize Json Response Payload\r\nResponse response = nuxeoClient.get(\"NUXEO_URL/path/\");\r\nassertEquals(true, response.isSuccessful());\r\nString json = response.body().string();\r\nDocument document = (Document) nuxeoClient.getConverterFactory().readJSON(json, Document.class);\r\n```\r\n\r\n```java\r\n// PUT Method and Deserialize Json Response Payload\r\nResponse response = nuxeoClient.put(\"NUXEO_URL/path/\", \"{\\\"entity-type\\\": \\\"document\\\",\\\"properties\\\": {\\\"dc:title\\\": \\\"new title\\\"}}\");\r\nassertEquals(true, response.isSuccessful());\r\nString json = response.body().string();\r\nDocument document = (Document) nuxeoClient.getConverterFactory().readJSON(json, Document.class);\r\n```\r\n\r\n####Async/Callbacks\r\n\r\nAll APIs from the client are executable in Asynchronous way.\r\n\r\nAll apis are duplicated with an additional parameter `retrofit2.Callback<T>`.\r\n\r\nWhen no response is needed (204 No Content Status for example), use `retrofit2.Callback<ResponseBody>` (`okhttp3.ResponseBody`). This object can be introspected like the response headers or status for instance.\r\n\r\n\r\nWIP: \r\n\r\n####Custom Endpoints\r\n\r\n####Marshalling\r\n\r\n####Cache\r\n\r\n####Errors/Exceptions\r\n\r\n## Testing\r\n\r\nThe Testing suite or TCK can be found in this project [`nuxeo-java-client-test`](https://github.com/nuxeo/nuxeo-java-client/tree/master/nuxeo-java-client-test).\r\n\r\n## Goals\r\n\r\nProvide a java library to make developing with Nuxeo REST API easier.\r\n\r\n## History\r\n\r\nThe initial `nuxeo-automation-client` is now old :\r\n\r\n - client design was based on Automation API before REST endpoints where available in Nuxeo\r\n - a lot of features around upload & download are missing\r\n - marshalling and exception management are sometimes bad  \r\n\r\nThe `nuxeo-automation-client` was then forked to build a Android version with some caching.\r\n\r\n## Constraints\r\n\r\n**JVM & Android**\r\n\r\nThe `nuxeo-java-client` must works on both a standard JVM and Android Dalvik VM.\r\n\r\n**Java 6 & Java 7**\r\n\r\nLibrary must work on older Java versions.\r\nThe goal is to be able to use `nuxeo-java-client` from application running in Java6 or Java 7.\r\n\r\n**Light dependencies** \r\n\r\nThe library should be easy to embed so we want to have as few dependencies as possible.\r\n\r\n**Cache compliant**\r\n\r\nIf needed, for example on Android, we should be able to easily add caching logic.\r\n\r\nWe do not need to implement all the caching features that were inside the Android Client, but we need to design the library so that adding them can be done without breaking the library structure.\r\n\r\n**Exception Management**\r\n\r\nClient should be able to retrieve the remote Exception easily and access to the trace feature would be ideal.\r\n\r\n## Design Principles\r\n\r\n**JS like**\r\n\r\nMake the API look like the JS one (Fluent, Promises ...)\r\n\r\n**Retrolambda & Retrofit**\r\n\r\nShare the http lib between JVM and Android.\r\nAllow to use Lambda in the code.\r\n\r\n**Jackson & Marshaling**\r\n\r\nBy default, the library fasterXML Jackson is used for objects marshalling in `nuxeo-java-client`.\r\n\r\nSeveral usages:\r\n\r\n- POJOS and Annotations.\r\n- Custom Json generators and parsers.\r\n\r\n**Caching Interceptors**\r\n\r\n#### Goals\r\n\r\nIf needed, for example on Android, we should be able to easily add caching logic.\r\n\r\n##### How?\r\n\r\nAll caches should be accessible via a generated cache key defined by the request itself:\r\n\r\n- headers\r\n- base url\r\n- endpoint used\r\n- parameters\r\n- body\r\n- content type\r\n- ...?\r\n\r\n##### How many?\r\n\r\n3 caches should be implemented:\r\n\r\n- **Raw Response Store** : The server response is simply stored on the device so that it can be reused in case the server is unreachable OR to avoid too many frequent calls.\r\n- **Document Response Store**: Store the unmarshalled response objects (here Documents) and updates.\r\n- **Document Transient Store** bound with deferred calls queue: keeping changes of document.\r\n- **Deferred Calls Queue**: The Create Update Delete operation will be stored locally and replayed when the server is available. Requests pure calls.\r\n\r\n- Actions/Events\r\n\r\n[Scenarii](https://docs.google.com/a/nuxeo.com/spreadsheets/d/1rlzMyLk_LD4OvdbJ37DBZjD5LiH4i7sb4V2YAYjINcc/edit?usp=sharing)\r\n\r\n#####Pending questions: Invalidations\r\n\r\n----> What would be a default timeout for each cache?\r\n\r\n**Potential rules offline:**\r\n\r\n- When listing documents, check the document transient store\r\n- then check the document response store\r\n- then check the server response\r\n\r\n#####Synchronisation\r\n\r\n- Should we apply those [rules](https://doc.nuxeo.com/display/NXDOC/Android+Connector+and+Caching#AndroidConnectorandCaching-TransientState) ?\r\n- Should we use ETag And/Or If-Modified-Since with HEAD method ?\r\n\r\n#####Potential Stores\r\n\r\nDepending on client:\r\n- \"In memory\" - guava for java\r\n- \"Database\" - SQlite for Android\r\n- Local storage for JS\r\n- On disk for both\r\n- Others?\r\n\r\n#####Miscellaneous\r\n\r\n- For the dirty properties of objects (like dirty properties of automation client for documents) - out of scope of caching\r\n\r\n\r\n**Error & Logging**\r\n\r\nThe `NuxeoClientException` within `nuxeo-java-client` is consuming the default and the extended rest exception response by the server. Here the [documentation](https://doc.nuxeo.com/x/JQI5AQ)\r\n\r\n## Reporting Issues\r\n\r\nWe are glad to welcome new developers on this initiative, and even simple usage feedback is great.\r\n\r\n- Ask your questions on [Nuxeo Answers](http://answers.nuxeo.com)\r\n- Report issues on this GitHub repository (see [issues link](http://github.com/nuxeo/nuxeo-java-client/issues) on the right)\r\n- Contribute: Send pull requests!\r\n\r\n##About third party libraries\r\n\r\n- Thanks a lot to the Square team for their [retrofit/okhttp](http://square.github.io/retrofit/) client libraries\r\n\r\n\r\n# About Nuxeo\r\n\r\nNuxeo dramatically improves how content-based applications are built, managed and deployed, making customers more agile, innovative and successful. Nuxeo provides a next generation, enterprise ready platform for building traditional and cutting-edge content oriented applications. Combining a powerful application development environment with SaaS-based tools and a modular architecture, the Nuxeo Platform and Products provide clear business value to some of the most recognizable brands including Verizon, Electronic Arts, Netflix, Sharp, FICO, the U.S. Navy, and Boeing. Nuxeo is headquartered in New York and Paris. More information is available at [www.nuxeo.com](http://www.nuxeo.com/).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}